{\rtf1\ansi\ansicpg1254\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red242\green242\blue242;\red173\green173\blue173;
\red0\green0\blue0;\red169\green14\blue26;\red158\green0\blue49;\red83\green83\blue83;\red51\green110\blue109;
}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c96078\c96078\c96078;\cssrgb\c73333\c73333\c73333;
\cssrgb\c0\c0\c0;\cssrgb\c72941\c12941\c12941;\cssrgb\c69020\c0\c25098;\cssrgb\c40000\c40000\c40000;\cssrgb\c25098\c50196\c50196;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww14980\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
package
\f1\b0 \cf4  \cf0 main\
\

\f0\b \cf2 import
\f1\b0 \cf4  \cf0 (\
\cf4       \cf6 "fmt"\cf0 \
)\
\

\f0\b \cf2 func
\f1\b0 \cf4  \cf0 SieveOfEratosthenes(n\cf4  \cf7 int\cf0 )\cf4  \cf0 []\cf7 int\cf4  \cf0 \{\
\cf4       \cf0 integers\cf4  \cf8 :=\cf4  \cf2 make\cf0 ([]\cf7 bool\cf0 ,\cf4  \cf0 n\cf8 +1\cf0 ) //create slice to store if number is prime\
\cf4       
\f0\b \cf2 for
\f1\b0 \cf4  \cf0 i\cf4  \cf8 :=\cf4  \cf8 2\cf0 ;\cf4  \cf0 i\cf4  \cf0 <\cf4  \cf0 n\cf8 +1\cf0 ;\cf4  \cf0 i\cf8 ++\cf4  \cf0 \{\
\cf4               \cf0 integers[i]\cf4  \cf0 =\cf4  
\f0\b \cf2 true
\f1\b0 \cf0 \
\cf4       \cf0 \}\
\
\cf4       
\f0\b \cf2 for
\f1\b0 \cf4  \cf0 p\cf4  \cf8 :=\cf4  \cf8 2\cf0 ;\cf4  \cf0 p\cf8 *\cf0 p\cf4  \cf8 <=\cf4  \cf0 n;\cf4  \cf0 p\cf8 ++\cf4  \cf0 \{\
\cf4              
\f0\b \cf2 if
\f1\b0 \cf4  \cf0 integers[p]\cf4  \cf8 ==\cf4  
\f0\b \cf2 true
\f1\b0 \cf4  \cf0 \{\
\cf4                      
\f0\b \cf2 for
\f1\b0 \cf4  \cf0 i\cf4  \cf8 :=\cf4  \cf0 p\cf4  \cf8 *\cf4  \cf8 2\cf0 ;\cf4  \cf0 i\cf4  \cf8 <=\cf4  \cf0 n;\cf4  \cf0 i\cf4  \cf8 +=\cf4  \cf0 p\cf4  \cf0 \{\
\cf4                               \cf0 integers[i]\cf4  \cf0 =\cf4  
\f0\b \cf2 false
\f1\b0 \cf0 \
\cf4                       \cf0 \}\
\cf4               \cf0 \}\
\cf4       \cf0 \}\
\
\cf4       
\f2\i \cf9 // return all prime numbers <= n
\f1\i0 \cf0 \
\cf4       
\f0\b \cf2 var
\f1\b0 \cf4  \cf0 primes\cf4  \cf0 []\cf7 int\cf0 \
\cf4       
\f0\b \cf2 for
\f1\b0 \cf4  \cf0 p\cf4  \cf8 :=\cf4  \cf8 2\cf0 ;\cf4  \cf0 p\cf4  \cf8 <=\cf4  \cf0 n;\cf4  \cf0 p\cf8 ++\cf4  \cf0 \{\
\cf4               
\f0\b \cf2 if
\f1\b0 \cf4  \cf0 integers[p]\cf4  \cf8 ==\cf4  
\f0\b \cf2 true
\f1\b0 \cf4  \cf0 \{\
\cf4                       \cf0 primes\cf4  \cf0 =\cf4  \cf2 append\cf0 (primes,\cf4  \cf0 p)\
\cf4               \cf0 \}\
\cf4       \cf0 \}\
\
\cf4       
\f0\b \cf2 return
\f1\b0 \cf4  \cf0 primes\
\}\
\

\f0\b \cf2 func
\f1\b0 \cf4  \cf0 main()\cf4  \cf0 \{\
\cf4       \cf0 fmt.Println(SieveOfEratosthenes(\cf8 10\cf0 ))\
\}}